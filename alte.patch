diff --git a/src/components/paymentForm/index.jsx b/src/components/paymentForm/index.jsx
index 8becc34..d39bccf 100644
--- a/src/components/paymentForm/index.jsx
+++ b/src/components/paymentForm/index.jsx
@@ -5,8 +5,10 @@ import { useNavigate } from "react-router-dom";
 import PixIcon from '../iCons/pixIcon';
 import LuckSecurity from "../iCons/luckSecurity";
 
-import { formatPhoneNumber, validatePhone } from "../../utils/formatPhone";
+import { isValidName } from "../../utils/formatName";
+import { isValidEmail } from "../../utils/formatEmail";
 import { validateCPF } from "../../utils/validateCPF";
+import { formatPhoneNumber, validatePhone } from "../../utils/formatPhone";
 import Pagarme from "../iCons/pagarme";
 import { createPixTransaction } from "../../services/api";
 
@@ -39,9 +41,19 @@ const PaymentForm = () => {
     event.preventDefault();
 
     // Previne submit se n√£o houver campos preenchidos
-    if (!name || !email || !document || !phone) {
+    // if (!name || !email || !document || !phone) {
+    //   return;
+    // }
+
+    if (!isValidName(name)) {
+      alert('Nome inv√°lido. Certifique-se de que o nome est√° correto.');
       return;
-    }
+    };
+
+    if (!isValidEmail(email)) {
+      alert('E-mail inv√°lido. Certifique-se de que o e-mail est√° correto.');
+      return;
+    };
 
     if (!validateCPF(document)) {
       alert('CPF inv√°lido. Certifique-se de que o CPF est√° correto.');
@@ -49,10 +61,11 @@ const PaymentForm = () => {
     };
 
     if (!validatePhone(phone)) {
-      alert('N√∫mero de telefone inv√°lido. O formato correto √© (DDD) 9XXXX-XXXX.');
+      alert('N√∫mero de telefone inv√°lido. O formato correto √© (DDD) 9 XXXX-XXXX.');
       return;
     };
 
+
     try {
       const response = await createPixTransaction({ name, email, document, phone });
       console.log(response, 'createPixTransaction');
@@ -99,7 +112,6 @@ const PaymentForm = () => {
                 value={name}
                 onChange={(e) => setName(e.target.value)}
                 placeholder="Nome"
-                required
               />
               <label>E-mail *</label>
               <Input
@@ -107,7 +119,6 @@ const PaymentForm = () => {
                 value={email}
                 onChange={(e) => setEmail(e.target.value)}
                 placeholder="Email"
-                required
               />
               <label>CPF *</label>
               <Input
@@ -115,7 +126,6 @@ const PaymentForm = () => {
                 value={document}
                 onChange={(e) => setDocument(e.target.value)}
                 placeholder="CPF"
-                required
               />
               <label>TELEFONE *</label>
               <Input
@@ -123,7 +133,6 @@ const PaymentForm = () => {
                 value={phone}
                 onChange={(e) => handlePhoneChange(e.target.value)}
                 placeholder="Telefone"
-                required
               />
               <ButtonContainer>
                 <PrimaryButton type="submit">Completar compra</PrimaryButton >
diff --git a/src/utils/formatName.js b/src/utils/formatName.js
index 304b645..acf14fd 100644
--- a/src/utils/formatName.js
+++ b/src/utils/formatName.js
@@ -1,16 +1,18 @@
 export const isValidName = (name) => {
-   // Remove espa√ßos extras no in√≠cio e no final
-   const trimmedName = name.trim();
 
-   // Verifica o comprimento do nome
-   if (trimmedName.length < 4 || trimmedName.length > 50) {
-      return false;
-   }
+  if (!name) return false;
+  // Remove espa√ßos extras no in√≠cio e no final
+  const trimmedName = name.trim();
 
-   // Express√£o regular para validar o formato do nome
-   // Permite letras (mai√∫sculas e min√∫sculas), espa√ßos, ap√≥strofos e h√≠fens
-   const nameRegex = /^[a-zA-Z√Ä-√ø'‚Äô-]+( [a-zA-Z√Ä-√ø'‚Äô-]+)*$/;
+  // Verifica o comprimento do nome
+  if (trimmedName.length < 4 || trimmedName.length > 50) {
+    return false;
+  }
 
-   // Retorna true se o nome for v√°lido, caso contr√°rio, false
-   return nameRegex.test(trimmedName);
+  // Express√£o regular para validar o formato do nome
+  // Permite letras (mai√∫sculas e min√∫sculas), espa√ßos, ap√≥strofos e h√≠fens
+  const nameRegex = /^[a-zA-Z√Ä-√ø'‚Äô-]+( [a-zA-Z√Ä-√ø'‚Äô-]+)*$/;
+
+  // Retorna true se o nome for v√°lido, caso contr√°rio, false
+  return nameRegex.test(trimmedName);
 };
diff --git a/src/utils/validateCPF.js b/src/utils/validateCPF.js
index e8c01e3..1af4f3a 100644
--- a/src/utils/validateCPF.js
+++ b/src/utils/validateCPF.js
@@ -1,22 +1,46 @@
+// üìå O que foi melhorado?
+// ‚úîÔ∏è Mantivemos a verifica√ß√£o do padr√£o (11 d√≠gitos num√©ricos).
+// ‚úîÔ∏è Bloqueamos sequ√™ncias inv√°lidas.
+// ‚úîÔ∏è Adicionamos a verifica√ß√£o do d√≠gito verificador para evitar CPFs falsos.
+
 export const validateCPF = (cpf) => {
-   const cpfPattern = /^\d{11}$/;
-   const invalidSequences = [
-      "00000000000",
-      "11111111111",
-      "22222222222",
-      "33333333333",
-      "44444444444",
-      "55555555555",
-      "66666666666",
-      "77777777777",
-      "88888888888",
-      "99999999999",
-      "12345678901"
-   ];
+  // Remove caracteres n√£o num√©ricos
+  cpf = cpf.replace(/\D/g, "");
+
+  // Padr√£o: 11 d√≠gitos e n√£o pode estar na lista de CPFs inv√°lidos
+  const cpfPattern = /^\d{11}$/;
+  const invalidSequences = [
+    "00000000000",
+    "11111111111",
+    "22222222222",
+    "33333333333",
+    "44444444444",
+    "55555555555",
+    "66666666666",
+    "77777777777",
+    "88888888888",
+    "99999999999",
+    "12345678901"
+  ];
+
+  if (!cpfPattern.test(cpf) || invalidSequences.includes(cpf)) {
+    return false;
+  }
+
+  // Valida√ß√£o do d√≠gito verificador
+  let soma = 0;
+  let resto;
+
+  for (let i = 1; i <= 9; i++) soma += parseInt(cpf[i - 1]) * (11 - i);
+  resto = (soma * 10) % 11;
+  if (resto === 10 || resto === 11) resto = 0;
+  if (resto !== parseInt(cpf[9])) return false;
 
-   if (!cpfPattern.test(cpf) || invalidSequences.includes(cpf)) {
-      return false;
-   }
+  soma = 0;
+  for (let i = 1; i <= 10; i++) soma += parseInt(cpf[i - 1]) * (12 - i);
+  resto = (soma * 10) % 11;
+  if (resto === 10 || resto === 11) resto = 0;
+  if (resto !== parseInt(cpf[10])) return false;
 
-   return true;
+  return true;
 };
