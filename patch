diff --git a/changes.patch b/changes.patch
deleted file mode 100644
index 51eaae8..0000000
--- a/changes.patch
+++ /dev/null
@@ -1,1611 +0,0 @@
-diff --git a/changes.patch b/changes.patch
-index be81cb5..e69de29 100644
---- a/changes.patch
-+++ b/changes.patch
-@@ -1,244 +0,0 @@
--diff --git a/alteracoes.patch b/alteracoes.patch
--deleted file mode 100644
--index f9f2645..0000000
----- a/alteracoes.patch
--+++ /dev/null
--@@ -1,225 +0,0 @@
---diff --git a/.env b/.env
---index cd41370..7cc4b7f 100644
------ a/.env
---+++ b/.env
---@@ -1 +1,4 @@
----VITE_API_URL=http://localhost:3000
---\ No newline at end of file
---+# VITE_API_URL=http://localhost:3000
---+
---+
---+VITE_API_URL=https://backend-venda.up.railway.app
---\ No newline at end of file
---diff --git a/alteracoes.patch b/alteracoes.patch
---index dfe02b2..e69de29 100644
------ a/alteracoes.patch
---+++ b/alteracoes.patch
---@@ -1,126 +0,0 @@
----diff --git a/alteracoes.patch b/alteracoes.patch
----index 3c7401e..e69de29 100644
------- a/alteracoes.patch
----+++ b/alteracoes.patch
----@@ -1,78 +0,0 @@
-----diff --git a/package.json b/package.json
-----index ee71b31..88da62a 100644
-------- a/package.json
-----+++ b/package.json
-----@@ -1,36 +1,37 @@
----- {
------  "name": "frontend-curso",
------  "private": true,
------  "version": "0.0.0",
------  "type": "module",
------  "scripts": {
------    "dev": "vite",
------    "build": "vite build",
------    "lint": "eslint .",
------    "preview": "vite preview"
------  },
------  "dependencies": {
------    "axios": "^1.7.7",
------    "jest": "^29.7.0",
------    "jwt-decode": "^4.0.0",
------    "react": "^18.3.1",
------    "react-dom": "^18.3.1",
------    "react-router-dom": "^6.26.2",
------    "socket.io-client": "^4.8.1",
------    "styled-components": "^6.1.13"
------  },
------  "devDependencies": {
------    "@eslint/js": "^9.9.0",
------    "@testing-library/react": "^16.0.1",
------    "@types/react": "^18.3.3",
------    "@types/react-dom": "^18.3.0",
------    "@types/styled-components": "^5.1.34",
------    "@vitejs/plugin-react-swc": "^3.5.0",
------    "eslint": "^9.9.0",
------    "eslint-plugin-react": "^7.35.0",
------    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
------    "eslint-plugin-react-refresh": "^0.4.9",
------    "globals": "^15.9.0",
------    "vite": "^5.4.1"
------  }
------}
-----+   "name": "frontend-curso",
-----+   "private": true,
-----+   "version": "0.0.0",
-----+   "type": "module",
-----+   "scripts": {
-----+      "dev": "vite",
-----+      "build": "vite build",
-----+      "lint": "eslint .",
-----+      "preview": "vite preview",
-----+      "start": "vite preview"
-----+   },
-----+   "dependencies": {
-----+      "axios": "^1.7.7",
-----+      "jest": "^29.7.0",
-----+      "jwt-decode": "^4.0.0",
-----+      "react": "^18.3.1",
-----+      "react-dom": "^18.3.1",
-----+      "react-router-dom": "^6.26.2",
-----+      "socket.io-client": "^4.8.1",
-----+      "styled-components": "^6.1.13"
-----+   },
-----+   "devDependencies": {
-----+      "@eslint/js": "^9.9.0",
-----+      "@testing-library/react": "^16.0.1",
-----+      "@types/react": "^18.3.3",
-----+      "@types/react-dom": "^18.3.0",
-----+      "@types/styled-components": "^5.1.34",
-----+      "@vitejs/plugin-react-swc": "^3.5.0",
-----+      "eslint": "^9.9.0",
-----+      "eslint-plugin-react": "^7.35.0",
-----+      "eslint-plugin-react-hooks": "^5.1.0-rc.0",
-----+      "eslint-plugin-react-refresh": "^0.4.9",
-----+      "globals": "^15.9.0",
-----+      "vite": "^5.4.1"
-----+   }
-----+}
-----\ No newline at end of file
----diff --git a/package.json b/package.json
----index 88da62a..c5d45e1 100644
------- a/package.json
----+++ b/package.json
----@@ -8,7 +8,7 @@
----       "build": "vite build",
----       "lint": "eslint .",
----       "preview": "vite preview",
-----      "start": "vite preview"
----+      "start": "vite preview --host"
----    },
----    "dependencies": {
----       "axios": "^1.7.7",
----diff --git a/teste.js b/teste.js
----deleted file mode 100644
----index e867c1e..0000000
------- a/teste.js
----+++ /dev/null
----@@ -1,10 +0,0 @@
-----const fn = () => {
-----   return false;
-----};
-----
-----const response = fn();
-----
-----
-----if (!response) {
-----   console.log(!response);
-----}
----\ No newline at end of file
----diff --git a/vite.config.js b/vite.config.js
----index 4383c95..d2b2d7a 100644
------- a/vite.config.js
----+++ b/vite.config.js
----@@ -4,4 +4,8 @@ import react from '@vitejs/plugin-react-swc';
---- // https://vitejs.dev/config/
---- export default defineConfig({
----    plugins: [react()],
----+   server: {
----+      host: true
----+   }
---- });
----+
---diff --git a/src/components/home/index.jsx b/src/components/home/index.jsx
---index 8467538..de4870d 100644
------ a/src/components/home/index.jsx
---+++ b/src/components/home/index.jsx
---@@ -4,7 +4,7 @@ const Home = () => {
--- 
---    return (
---       <StyledContainer>
----         <h1>Home</h1>
---+         <h1 style={{ textAlign: "center" }}>aqui fica aba para usuário não pagante tem acesso.</h1>
---       </StyledContainer>
---    );
--- };
---diff --git a/src/components/home/styles.js b/src/components/home/styles.js
---index 94d3a60..d60f9c2 100644
------ a/src/components/home/styles.js
---+++ b/src/components/home/styles.js
---@@ -2,6 +2,7 @@ import styled from "styled-components";
--- 
--- export const StyledContainer = styled.div`
--- /* grid-area: content; */
---+
--- `;
--- 
--- export const SubContainer = styled.div`
---diff --git a/src/pages/pagePaymentConfirmation/index.jsx b/src/pages/pagePaymentConfirmation/index.jsx
---index 878cd4b..971cf23 100644
------ a/src/pages/pagePaymentConfirmation/index.jsx
---+++ b/src/pages/pagePaymentConfirmation/index.jsx
---@@ -1,4 +1,5 @@
--- import PaymentConfirmation from "../../components/paymentConfirmation";
---+import GridLayout from "../../components/layout";
--- import Header from "../../components/header";
--- import Navbar from '../../components/hamburgerMenu';
--- import { StyledContainer } from "./styles";
---@@ -8,11 +9,13 @@ import { StyledContainer } from "./styles";
--- const PagePaymentConfirmation = () => {
---    return (
---       <>
----         <Navbar></Navbar>
----         <Header></Header>
----         <StyledContainer>
----            <PaymentConfirmation></PaymentConfirmation>
----         </StyledContainer>
---+         {/* <Navbar></Navbar>
---+         <Header></Header> */}
---+         <GridLayout>
---+            <StyledContainer>
---+               <PaymentConfirmation></PaymentConfirmation>
---+            </StyledContainer>
---+         </GridLayout>
---       </>
---    );
--- };
---diff --git a/src/pages/pagePaymentForm/index.jsx b/src/pages/pagePaymentForm/index.jsx
---index 12703c6..f14c882 100644
------ a/src/pages/pagePaymentForm/index.jsx
---+++ b/src/pages/pagePaymentForm/index.jsx
---@@ -1,3 +1,4 @@
---+import GridLayout from "../../components/layout";
--- import PaymentForm from "../../components/paymentForm";
--- import Header from "../../components/header";
--- import { StyledPayment } from "./styles";
---@@ -6,11 +7,13 @@ import Navbar from '../../components/hamburgerMenu';
--- const PaymentService = () => {
---    return (
---       <>
----         <Navbar></Navbar>
----         <Header></Header>
----         <StyledPayment>
----            <PaymentForm />
----         </StyledPayment>
---+         {/* <Navbar></Navbar>
---+         <Header></Header> */}
---+         <GridLayout>
---+            <StyledPayment>
---+               <PaymentForm />
---+            </StyledPayment>
---+         </GridLayout>
---       </>
---    );
--- };
--diff --git a/src/components/paymentConfirmation/index.jsx b/src/components/paymentConfirmation/index.jsx
--index 7cf0e01..52fc611 100644
----- a/src/components/paymentConfirmation/index.jsx
--+++ b/src/components/paymentConfirmation/index.jsx
--@@ -20,7 +20,7 @@ const PaymentConfirmation = () => {
--       // console.log(userToken, "userToken");
-- 
--       // Conecta ao servidor WebSocket com reconexão automática
---      const socket = io('http://localhost:3000', {
--+      const socket = io('https://backend-venda.up.railway.app', {
--          transports: ['websocket'],
--          reconnection: true,           // Habilita reconexão automática
--          reconnectionAttempts: 5,      // Tenta reconectar 5 vezes
-diff --git a/src/components/courseList/index.jsx b/src/components/courseList/index.jsx
-index 0519b17..c3e2eaa 100644
---- a/src/components/courseList/index.jsx
-+++ b/src/components/courseList/index.jsx
-@@ -4,45 +4,45 @@ import { StyledContainer } from "./styles";
- // import { getPaymentStatusFromDatabaseCheckPayment } from "../../services/api";
- 
- const CourseList = () => {
--   const [loading, setLoading] = useState(true); // Estado para controlar o carregamento
--   const navigate = useNavigate();
--
--   // useEffect(() => {
--   //    const userToken = localStorage.getItem("token");
--
--   //    const userIsPaidValidate = async () => {
--   //       if (!userToken) {
--   //          // Redireciona para a página de login se não houver token
--   //          navigate("/conecte-se");
--   //          return;
--   //       }
--
--   //       try {
--   //          const result = await getPaymentStatusFromDatabase(userToken);
--
--   //          // Verifica se o pagamento foi realizado
--   //          if (!result.paid || result.paid === "noPaid" || result.paid === null) {
--   //             navigate("/pagamento");
--   //          }
--   //       } catch (error) {
--   //          console.error("Erro ao verificar o status de pagamento:", error);
--   //          navigate("/pagamento");
--   //       } finally {
--   //          setLoading(false); // Após a verificação, para o estado de carregamento
--   //       }
--   //    };
--
--   //    userIsPaidValidate();
--   // }, [navigate]);
--
--   // Exibe um indicador de carregamento enquanto o status de pagamento está sendo verificado
--   if (loading) return null; // Aguarda o carregamento
--
--   return (
--      <StyledContainer>
--         <h1>Essa rota é privada, visível apenas para usuários assinantes.</h1>
--      </StyledContainer>
--   );
-+  const [loading, setLoading] = useState(true); // Estado para controlar o carregamento
-+  const navigate = useNavigate();
-+
-+  // useEffect(() => {
-+  //    const userToken = localStorage.getItem("token");
-+
-+  //    const userIsPaidValidate = async () => {
-+  //       if (!userToken) {
-+  //          // Redireciona para a página de login se não houver token
-+  //          navigate("/conecte-se");
-+  //          return;
-+  //       }
-+
-+  //       try {
-+  //          const result = await getPaymentStatusFromDatabase(userToken);
-+
-+  //          // Verifica se o pagamento foi realizado
-+  //          if (!result.paid || result.paid === "noPaid" || result.paid === null) {
-+  //             navigate("/pagamento");
-+  //          }
-+  //       } catch (error) {
-+  //          console.error("Erro ao verificar o status de pagamento:", error);
-+  //          navigate("/pagamento");
-+  //       } finally {
-+  //          setLoading(false); // Após a verificação, para o estado de carregamento
-+  //       }
-+  //    };
-+
-+  //    userIsPaidValidate();
-+  // }, [navigate]);
-+
-+  // Exibe um indicador de carregamento enquanto o status de pagamento está sendo verificado
-+  // if (loading) return null; // Aguarda o carregamento
-+
-+  return (
-+    <StyledContainer>
-+      <h1>Essa rota é privada, visível apenas para usuários assinantes.</h1>
-+    </StyledContainer>
-+  );
- };
- 
- export default CourseList;
-diff --git a/src/components/footer/styles.js b/src/components/footer/styles.js
-index 0158c1e..7b118a0 100644
---- a/src/components/footer/styles.js
-+++ b/src/components/footer/styles.js
-@@ -4,4 +4,6 @@ export const StyledFooter = styled.div`
- grid-area: footer;
- 
- border: 1px solid #000;
-+background-color: #333;
-+box-shadow: 4px -4px 6px 0 rgba(0, 0, 0, 0.2), 4px -4px 100px 0 rgba(0, 170, 255, 0.2);
- `;
-\ No newline at end of file
-diff --git a/src/components/hamburgerMenu/index.jsx b/src/components/hamburgerMenu/index.jsx
-index 764dffa..6e3d49d 100644
---- a/src/components/hamburgerMenu/index.jsx
-+++ b/src/components/hamburgerMenu/index.jsx
-@@ -3,38 +3,38 @@ import { Nav, Hamburger, Menu } from './styles';
- import { Link } from "react-router-dom";
- import { AuthContext } from '../../contexts/authContext';
- 
--const Navbar = () => {
--   const { hasPaid, isAuthenticated } = useContext(AuthContext);
--   const [open, setOpen] = useState(false);
--   // Função que fecha o menu
--   const closeMenu = () => setOpen(false);
-+const HamburgerMenu = () => {
-+  const { hasPaid, isAuthenticated } = useContext(AuthContext);
-+  const [open, setOpen] = useState(false);
-+  // Função que fecha o menu
-+  const closeMenu = () => setOpen(false);
- 
--   return (
--      <Nav>
--         <Hamburger onClick={() => setOpen(!open)} open={open}>
--            <div />
--            <div />
--            <div />
--         </Hamburger>
--         <Menu open={open}>
--            {
--               hasPaid ? (
--                  <Link onClick={closeMenu} to="/cursos-lista">Curso</Link>
--               ) : (
--                  <Link onClick={closeMenu} to="/pagamento">Assinatura</Link>
--               )
--            }
--            {!isAuthenticated && (
--               <>
--                  <Link onClick={closeMenu} to="/users/sign_up">Cadastro</Link>
--                  <Link onClick={closeMenu} to="/conecte-se">Entrar</Link>
--               </>
--            )}
-+  return (
-+    <Nav>
-+      <Hamburger onClick={() => setOpen(!open)} open={open}>
-+        <div />
-+        <div />
-+        <div />
-+      </Hamburger>
-+      <Menu open={open}>
-+        {
-+          hasPaid ? (
-+            <Link onClick={closeMenu} to="/cursos-lista">Curso</Link>
-+          ) : (
-+            <Link onClick={closeMenu} to="/pagamento">Assinatura</Link>
-+          )
-+        }
-+        {!isAuthenticated && (
-+          <>
-+            <Link onClick={closeMenu} to="/users/sign_up">Cadastro</Link>
-+            <Link onClick={closeMenu} to="/conecte-se">Entrar</Link>
-+          </>
-+        )}
- 
--            <Link onClick={closeMenu} to="/">Início</Link>
--         </Menu>
--      </Nav>
--   );
-+        <Link onClick={closeMenu} to="/">Início</Link>
-+      </Menu>
-+    </Nav>
-+  );
- };
- 
--export default Navbar;
-\ No newline at end of file
-+export default HamburgerMenu;
-\ No newline at end of file
-diff --git a/src/components/header/index.jsx b/src/components/header/index.jsx
-index 7abddf2..30d10c2 100644
---- a/src/components/header/index.jsx
-+++ b/src/components/header/index.jsx
-@@ -6,50 +6,50 @@ import logo from '../../assets/images/logo.png';
- import { AuthContext } from '../../contexts/authContext';
- 
- const Header = () => {
--   const { isAuthenticated, hasPaid, logout } = useContext(AuthContext);
--   console.log(!isAuthenticated, "isAuthenticated");
--   const [isLoading, setIsLoading] = useState(true); // Estado de carregamento
--   // console.log(hasPaid);
-+  const { isAuthenticated, hasPaid, logout } = useContext(AuthContext);
-+  console.log(!isAuthenticated, "isAuthenticated");
-+  const [isLoading, setIsLoading] = useState(true); // Estado de carregamento
-+  // console.log(hasPaid);
- 
--   // esse header é só visivel se caso "hasPaid(true)", enquanto o usuario não faz o login 
--   // vai ser sempre "hasPaid(false)", quando login é feito, possa ser que seja true se pagou se não pagou
--   // vai ser false. Por coincidencia o header não mostra na pagina de login (conectar) ou singup (registrar). O login e singup
--   // ficou mais limpo, mostrando só componente login ou singup.
-+  // esse header é só visivel se caso "hasPaid(true)", enquanto o usuario não faz o login 
-+  // vai ser sempre "hasPaid(false)", quando login é feito, possa ser que seja true se pagou se não pagou
-+  // vai ser false. Por coincidencia o header não mostra na pagina de login (conectar) ou singup (registrar). O login e singup
-+  // ficou mais limpo, mostrando só componente login ou singup.
- 
--   // Simula o carregamento inicial até o valor de hasPaid ser definido
--   useEffect(() => {
--      if (hasPaid !== undefined) {
--         setIsLoading(false); // Finaliza o carregamento quando hasPaid é definido
--      }
--   }, [hasPaid]);
-+  // Simula o carregamento inicial até o valor de hasPaid ser definido
-+  useEffect(() => {
-+    if (hasPaid !== undefined) {
-+      setIsLoading(false); // Finaliza o carregamento quando hasPaid é definido
-+    }
-+  }, [hasPaid]);
- 
--   // Enquanto está carregando, mostra o loader
--   if (isLoading) return null; // Aguarda o carregamento 
-+  // Enquanto está carregando, mostra o loader
-+  if (isLoading) return null; // Aguarda o carregamento 
- 
--   return (
--      <StyledContainer>
--         <Img width="150px" height="150px" src={logo} alt="" onClick={() => logout()} style={{ cursor: "pointer" }} />
--         <Gradientspan>Aprendar Ganhar dinheiro com redes sociais</Gradientspan>
--         {/* renderização condicional na navegação */}
--         <ul className="nav-list">
--            {
--               hasPaid ? (
--                  <li className='nav-item'><Link to="/cursos-lista">CURSO</Link></li>
--               ) : (
--                  <li className='nav-item'><Link to="/pagamento">ASSINATURA</Link></li>
--               )
--            }
--            <li className='nav-item'><Link to="/">INICIO</Link></li>
--            {isAuthenticated && (
--               <li className='nav-item'><Button onClick={() => logout()}>SAIR</Button></li>
--            )}
--            {/* Só exibe o "ENTRAR" se o usuário não estiver autenticado */}
--            {!isAuthenticated && (
--               <li className='nav-item'><Link to="/conecte-se">ENTRAR</Link></li>
--            )}
--         </ul>
--      </StyledContainer>
--   );
-+  return (
-+    <StyledContainer>
-+      <Img width="150px" height="150px" src={logo} alt="" onClick={() => logout()} style={{ cursor: "pointer" }} />
-+      <Gradientspan>Aprendar Ganhar dinheiro com redes sociais</Gradientspan>
-+      {/* renderização condicional na navegação */}
-+      <ul className="nav-list">
-+        {
-+          hasPaid ? (
-+            <li className='nav-item'><Link to="/cursos-lista">CURSO</Link></li>
-+          ) : (
-+            <li className='nav-item'><Link to="/gerar-pix">ASSINATURA</Link></li>
-+          )
-+        }
-+        <li className='nav-item'><Link to="/">INICIO</Link></li>
-+        {isAuthenticated && (
-+          <li className='nav-item'><Button onClick={() => logout()}>SAIR</Button></li>
-+        )}
-+        {/* Só exibe o "ENTRAR" se o usuário não estiver autenticado */}
-+        {!isAuthenticated && (
-+          <li className='nav-item'><Link to="/conecte-se">ENTRAR</Link></li>
-+        )}
-+      </ul>
-+    </StyledContainer>
-+  );
- };
- 
- export default Header;
-\ No newline at end of file
-diff --git a/src/components/layout/index.jsx b/src/components/layout/index.jsx
-index dac194d..eb4b581 100644
---- a/src/components/layout/index.jsx
-+++ b/src/components/layout/index.jsx
-@@ -1,7 +1,7 @@
- import Content from '../content';
- import Header from '../header';
- import Footer from '../footer';
--import Navbar from '../hamburgerMenu';
-+import HamburgerMenu from '../hamburgerMenu';
- import { useContext, useEffect } from "react";
- import { AuthContext } from '../../contexts/authContext';
- 
-@@ -10,27 +10,27 @@ import { Section } from './styles';
- import { useNavigate } from "react-router-dom";
- 
- const GridLayout = ({ children }) => {
--   const { hasPaid, loading } = useContext(AuthContext);
--   const navigate = useNavigate();
--
--   // useEffect(() => {
--   //    if (!children) {
--   //       hasPaid ? navigate("/cursos-lista") : navigate("/pagamento");
--   //    }
--   // }, [hasPaid, navigate, children]);
--
--   if (loading) return null; // Aguarda o carregamento
--
--   return (
--      <Section>
--         <Navbar></Navbar>
--         <Header />
--         <Content>
--            {children}
--         </Content>
--         <Footer />
--      </Section>
--   );
-+  const { hasPaid, loading } = useContext(AuthContext);
-+  const navigate = useNavigate();
-+
-+  // useEffect(() => {
-+  //    if (!children) {
-+  //       hasPaid ? navigate("/cursos-lista") : navigate("/pagamento");
-+  //    }
-+  // }, [hasPaid, navigate, children]);
-+
-+  if (loading) return null; // Aguarda o carregamento
-+
-+  return (
-+    <Section>
-+      <HamburgerMenu></HamburgerMenu>
-+      <Header />
-+      <Content>
-+        {children}
-+      </Content>
-+      <Footer />
-+    </Section>
-+  );
- };
- 
- export default GridLayout;
-diff --git a/src/components/layout/styles.js b/src/components/layout/styles.js
-index 0defd33..f24688c 100644
---- a/src/components/layout/styles.js
-+++ b/src/components/layout/styles.js
-@@ -6,7 +6,7 @@ display: grid;
- grid-template:            
- "header  header header" 100px /* rows */
- "content content content" 1fr /* rows */ 
--"footer  footer  footer" 100px / 100px 1fr 100px; /* rows */
-+"footer  footer  footer" 60px / 60px 1fr 60px; /* rows */
- /*columns columns columns */
- height: 100vh;
- 
-diff --git a/src/components/paymentConfirmation/index.jsx b/src/components/paymentConfirmation/index.jsx
-index 52fc611..8091c5a 100644
---- a/src/components/paymentConfirmation/index.jsx
-+++ b/src/components/paymentConfirmation/index.jsx
-@@ -1,4 +1,4 @@
--import { useLocation } from "react-router-dom";
-+import { useLocation, useNavigate } from "react-router-dom";
- import { useContext, useEffect, useState } from "react";
- import { StyledContainer, H1, P01, Check, TitleH1, ButtonPrimary, ContainerPixQrCode, Container } from "./styles";
- import ValidityInfo from "../paymentValidationInformation";
-@@ -9,101 +9,134 @@ import { AuthContext } from '../../contexts/authContext';
- import { io } from 'socket.io-client';
- 
- const PaymentConfirmation = () => {
--   const [copySuccess, setCopySuccess] = useState(""); // Estado para mostrar mensagem de sucesso
--   const location = useLocation();
--   const { pix_qr_code_url, qr_code, userID } = location.state || {}; // Recupera o qrCode do state
--   const [paymentConfirmed, setPaymentConfirmed] = useState(false);
--   const { setHasPaid } = useContext(AuthContext);
--
--   useEffect(() => {
--      const userToken = localStorage.getItem("token");
--      // console.log(userToken, "userToken");
--
--      // Conecta ao servidor WebSocket com reconexão automática
--      const socket = io('https://backend-venda.up.railway.app', {
--         transports: ['websocket'],
--         reconnection: true,           // Habilita reconexão automática
--         reconnectionAttempts: 5,      // Tenta reconectar 5 vezes
--         reconnectionDelay: 1000,      // Delay entre as tentativas de reconexão (1 segundo)
--         // auth: { token: userToken }, // Envia o token como autenticação, obter no backend io.on('connection', (socket) => 
--      });
--
--      socket.emit('joinRoom', userID);
--
--      // Escuta por atualizações de pagamento via WebSocket
--      socket.on('paymentUpdate', async (data) => {
--         console.log('Pagamento atualizado via WebSocket:', data); // Log para verificar os dados recebidos
--         if (data.status === 'paid') {
--
--            // Requisição ao backend para buscar o status de pagamento
--            const paymentStatus = await getPaymentStatusFromDatabaseCheckPayment(userToken);
--            // console.log(paymentStatus.paid, "useEffect PixPaymentConfirmation");
--
--            if (paymentStatus.paid === "paid") {
--               localStorage.setItem("status", paymentStatus.paid);
--               setHasPaid(true); // Atualiza o contexto com o status de pagamento
--               setPaymentConfirmed(true);
--            }
--         }
-+  const [copySuccess, setCopySuccess] = useState(""); // Estado para mostrar mensagem de sucesso
-+  const location = useLocation();
-+  const navigate = useNavigate();
-+  const [paymentConfirmed, setPaymentConfirmed] = useState(false);
-+  const { user, setHasPaid } = useContext(AuthContext);
-+
-+  // Armazena os dados do location.state no estado local apenas na primeira renderização
-+  // obs: esses dados vem da criação do pix component ( paymentForm )
-+  const [displayData] = useState(() => location.state || {});
-+  const { pix_qr_code_url, qr_code, userID } = displayData;
-+
-+  // Após a primeira renderização, limpa o location.state para que não fique disponível em futuros refresh
-+  useEffect(() => {
-+    if (location.state) {
-+      const timer = setTimeout(() => {
-+        navigate(location.pathname, { replace: true, state: null });
-+      }, 5000); // Aguarda 100ms para garantir que a renderização inicial ocorra
-+      return () => clearTimeout(timer);
-+    }
-+  }, [location, navigate]);
-+
-+  useEffect(() => {
-+    const userToken = localStorage.getItem("token");
-+    // console.log(userToken, "userToken");
-+
-+    // Conecta ao servidor WebSocket com reconexão automática
-+    const socket = io('https://backend-venda.up.railway.app', {
-+      transports: ['websocket'],
-+      reconnection: true,           // Habilita reconexão automática
-+      reconnectionAttempts: 5,      // Tenta reconectar 5 vezes
-+      reconnectionDelay: 1000,      // Delay entre as tentativas de reconexão (1 segundo)
-+      // auth: { token: userToken }, // Envia o token como autenticação, obter no backend io.on('connection', (socket) => 
-+    });
-+
-+    socket.emit('joinRoom', userID);
-+
-+    // Escuta por atualizações de pagamento via WebSocket
-+    socket.on('paymentUpdate', async (data) => {
-+      console.log('Pagamento atualizado via WebSocket:', data); // Log para verificar os dados recebidos
-+      if (data.status === 'paid') {
-+
-+        // Requisição ao backend para buscar o status de pagamento
-+        const paymentStatus = await getPaymentStatusFromDatabaseCheckPayment(userToken);
-+        // console.log(paymentStatus.paid, "useEffect PixPaymentConfirmation");
-+
-+        if (paymentStatus.paid === "paid") {
-+          localStorage.setItem("status", paymentStatus.paid);
-+          setHasPaid(true); // Atualiza o contexto com o status de pagamento
-+          setPaymentConfirmed(true);
-+        }
-+      }
-+    });
-+
-+    // Cleanup ao desmontar o componente
-+    return () => socket.disconnect();
-+  }, []);
-+
-+  const copyToClipboard = () => {
-+    if (qr_code) {
-+      navigator.clipboard.writeText(qr_code).then(() => {
-+        setCopySuccess("Código copiado com sucesso!");
-+      }).catch(() => {
-+        setCopySuccess("Falha ao copiar o código.");
-       });
-+    }
-+  };
- 
--      // Cleanup ao desmontar o componente
--      return () => socket.disconnect();
--   }, []);
--
--   const copyToClipboard = () => {
--      if (qr_code) {
--         navigator.clipboard.writeText(qr_code).then(() => {
--            setCopySuccess("Código copiado com sucesso!");
--         }).catch(() => {
--            setCopySuccess("Falha ao copiar o código.");
--         });
--      }
--   };
- 
--   return (
-+  // Se os dados não estiverem disponíveis, mostra uma mensagem
-+  // obs: o user.id que vem de contexts tem que ser mesmo que vem como response.userID da criação do pix. Component ( paymentForm )
-+  // if (!pix_qr_code_url || !qr_code || user.id != userID) {}
-+  if (!pix_qr_code_url || !qr_code) {
-+    return (
-       <StyledContainer>
--         <Check>
--            {paymentConfirmed && (
--               <CheckCircle></CheckCircle>
--            )}
--            <TitleH1>
--               {paymentConfirmed ? (
--                  <>
--                     <H1>Pedido realizado com sucesso!</H1>
--                  </>
--               ) : (
--                  <div style={{ display: "flex", flexDirection: "column", alignItems: "center", margin: "20px 0 20px 0" }}>
--                     <div>Aguardando confirmação...</div>
--                     <P01>Agora é só realizar o pagamento</P01>
--                  </div>
--               )}
--            </TitleH1>
--         </Check>
--         <Container>
--            <ContainerPixQrCode >
--               {pix_qr_code_url && (
--                  <div>
--                     <img
--                        src={pix_qr_code_url}
--                        alt="QR Code para pagamento PIX"
--                     />
--                  </div>
--               )}
--               <br />
--               <div>
--                  <ButtonPrimary onClick={copyToClipboard}>COPIAR CÓDIGO PIX</ButtonPrimary>
--               </div>
--               {copySuccess && (
--                  <div style={{ marginTop: "10px", color: "green", fontSize: "12px" }}>
--                     {copySuccess}
--                  </div>
--               )}
--            </ContainerPixQrCode>
--            <ValidityInfo></ValidityInfo>
--         </Container>
-+        <H1>QR Code expirado</H1>
-+        <P01>
-+          O QR Code não está mais disponível. Para realizar o pagamento, gere um novo Pix.
-+        </P01>
-+        <ButtonPrimary onClick={() => navigate("/gerar-pix")}>
-+          Gerar Novo Pix
-+        </ButtonPrimary>
-       </StyledContainer>
--   );
-+    );
-+  }
-+
-+  return (
-+    <StyledContainer>
-+      <Check>
-+        {paymentConfirmed && (
-+          <CheckCircle></CheckCircle>
-+        )}
-+        <TitleH1>
-+          {paymentConfirmed ? (
-+            <>
-+              <H1>Pedido realizado com sucesso!</H1>
-+            </>
-+          ) : (
-+            <div style={{ display: "flex", flexDirection: "column", alignItems: "center", margin: "20px 0 20px 0" }}>
-+              <div>Aguardando confirmação...</div>
-+              <P01>Agora é só realizar o pagamento</P01>
-+            </div>
-+          )}
-+        </TitleH1>
-+      </Check>
-+      <Container>
-+        <ContainerPixQrCode >
-+          {pix_qr_code_url && (
-+            <div>
-+              <img
-+                src={pix_qr_code_url}
-+                alt="QR Code para pagamento PIX"
-+              />
-+            </div>
-+          )}
-+          <br />
-+          <div>
-+            <ButtonPrimary onClick={copyToClipboard}>COPIAR CÓDIGO PIX</ButtonPrimary>
-+          </div>
-+          {copySuccess && (
-+            <div style={{ marginTop: "10px", color: "green", fontSize: "12px" }}>
-+              {copySuccess}
-+            </div>
-+          )}
-+        </ContainerPixQrCode>
-+        <ValidityInfo></ValidityInfo>
-+      </Container>
-+    </StyledContainer>
-+  );
- };
- 
- export default PaymentConfirmation;
-diff --git a/src/components/paymentConfirmation/styles.js b/src/components/paymentConfirmation/styles.js
-index 95d6ecd..9a18e46 100644
---- a/src/components/paymentConfirmation/styles.js
-+++ b/src/components/paymentConfirmation/styles.js
-@@ -1,10 +1,11 @@
- import styled from "styled-components";
- 
- export const StyledContainer = styled.div`
--width: 70%;
-+width: 100%;
-+max-width: 900px;
- display: flex;
--align-items: center;
- flex-direction: column;
-+align-items: center;
- border: 3px solid red;
- 
- `;
-@@ -56,7 +57,9 @@ height: 40px;
- export const Container = styled.div`
- width: 100%;
- display: flex;
-+align-items: center;
- justify-content: space-evenly;
-+/* justify-content: space-evenly; */
- 
- 
- & img {
-diff --git a/src/components/paymentForm/index.jsx b/src/components/paymentForm/index.jsx
-index 1c9a669..8becc34 100644
---- a/src/components/paymentForm/index.jsx
-+++ b/src/components/paymentForm/index.jsx
-@@ -1,5 +1,5 @@
- import { useState, useEffect } from "react";
--import { StyledContainer, ContainerForm, Form, Input, PrimaryButton, H2, ButtonContainer, PricingSection, TotalAmount, PaymentAccessSection, SpanBrl, SpanTotal, Span01 } from './styles';
-+import { StyledContainer, PaymentContainer, ContainerForm, Form, Input, PrimaryButton, H2, ButtonContainer, PricingSection, TotalAmount, PaymentAccessSection, SpanBrl, SpanTotal, Span01 } from './styles';
- import artExtreme from '../../assets/images/artExtreme.jpg';
- import { useNavigate } from "react-router-dom";
- import PixIcon from '../iCons/pixIcon';
-@@ -11,133 +11,133 @@ import Pagarme from "../iCons/pagarme";
- import { createPixTransaction } from "../../services/api";
- 
- const PaymentForm = () => {
--   const [name, setName] = useState('');
--   const [email, setEmail] = useState('');
--   const [document, setDocument] = useState('');
--   const [phone, setPhone] = useState('');
--   const [loading, setLoading] = useState(true); // Estado para controlar a renderização
--   // const [userLogged, setUserLogged] = useState(false);
--   const navigate = useNavigate();
-+  const [name, setName] = useState('');
-+  const [email, setEmail] = useState('');
-+  const [document, setDocument] = useState('');
-+  const [phone, setPhone] = useState('');
-+  const [loading, setLoading] = useState(true); // Estado para controlar a renderização
-+  // const [userLogged, setUserLogged] = useState(false);
-+  const navigate = useNavigate();
- 
--   // Verifica se o usuário está logado
--   // useEffect(() => {
--   //    const token = localStorage.getItem('token'); // Exemplo: verificando se existe um token de autenticação
--   //    if (!token) {
--   //       navigate("/conecte-se"); // Redireciona para a página de login se o usuário não estiver logado
--   //    } else {
--   //       setLoading(false); // Se o usuário estiver logado, termina o carregamento
--   //    }
--   // }, [navigate]);
-+  // Verifica se o usuário está logado
-+  // useEffect(() => {
-+  //    const token = localStorage.getItem('token'); // Exemplo: verificando se existe um token de autenticação
-+  //    if (!token) {
-+  //       navigate("/conecte-se"); // Redireciona para a página de login se o usuário não estiver logado
-+  //    } else {
-+  //       setLoading(false); // Se o usuário estiver logado, termina o carregamento
-+  //    }
-+  // }, [navigate]);
- 
--   const handlePhoneChange = async (value) => {
--      setPhone(formatPhoneNumber(value)); // Use a função utilitária para formatar
--   };
-+  const handlePhoneChange = async (value) => {
-+    setPhone(formatPhoneNumber(value)); // Use a função utilitária para formatar
-+  };
- 
--   // handleSubmit
--   const handleSubmit = async (event) => {
--      console.log("Formulário enviado");
--      event.preventDefault();
-+  // handleSubmit
-+  const handleSubmit = async (event) => {
-+    console.log("Formulário enviado");
-+    event.preventDefault();
- 
--      // Previne submit se não houver campos preenchidos
--      if (!name || !email || !document || !phone) {
--         return;
--      }
-+    // Previne submit se não houver campos preenchidos
-+    if (!name || !email || !document || !phone) {
-+      return;
-+    }
- 
--      if (!validateCPF(document)) {
--         alert('CPF inválido. Certifique-se de que o CPF está correto.');
--         return;
--      };
-+    if (!validateCPF(document)) {
-+      alert('CPF inválido. Certifique-se de que o CPF está correto.');
-+      return;
-+    };
- 
--      if (!validatePhone(phone)) {
--         alert('Número de telefone inválido. O formato correto é (DDD) 9XXXX-XXXX.');
--         return;
--      };
-+    if (!validatePhone(phone)) {
-+      alert('Número de telefone inválido. O formato correto é (DDD) 9XXXX-XXXX.');
-+      return;
-+    };
- 
--      try {
--         const response = await createPixTransaction({ name, email, document, phone });
--         console.log(response, 'createPixTransaction');
--         // Redireciona para a página de confirmação e envia o response como state
--         navigate("/confirmacao-pagamento", { state: { pix_qr_code_url: response.pix_qr_code_url, qr_code: response.qr_code, userID: response.userID } });
--      } catch (error) {
--         console.error('Erro ao criar transação PIX:', error);
--      }
-+    try {
-+      const response = await createPixTransaction({ name, email, document, phone });
-+      console.log(response, 'createPixTransaction');
-+      // Redireciona para a página de confirmação e envia o response como state
-+      navigate("/confirmacao-pix-gerado", { state: { pix_qr_code_url: response.pix_qr_code_url, qr_code: response.qr_code, userID: response.userID } });
-+    } catch (error) {
-+      console.error('Erro ao criar transação PIX:', error);
-+    }
- 
--   };
-+  };
- 
--   // if (loading) {
--   //    return null; // Enquanto está carregando, não renderiza nada
--   // }
-+  // if (loading) {
-+  //    return null; // Enquanto está carregando, não renderiza nada
-+  // }
- 
--   return (
--      <>
--         <StyledContainer>
--            <PricingSection>
--               <PaymentAccessSection>
--                  <img width="100%" src={artExtreme} alt="" />
--                  <h3> Crie conteúdo para redes sociais</h3>
--               </PaymentAccessSection>
--               <TotalAmount>
--                  <div>
--                     <SpanBrl>BRL</SpanBrl> <strong>R$1,00</strong>
--                  </div>
--                  <div style={{ display: "flex", alignItems: "center", justifyItems: "center" }}>
--                     <span style={{ marginRight: "10px" }}>Pix</span>
--                     <PixIcon></PixIcon>
--                  </div>
--               </TotalAmount>
--            </PricingSection>
--            <div style={{ display: "flex", flexDirection: "column", alignItems: "center", width: "50%", borderTop: "1px solid #000" }}>
--               <Pagarme></Pagarme>
--               <ContainerForm>
--                  <div style={{ display: "flex", alignItems: "center", justifyContent: "end" }}>
--                     <LuckSecurity /> <Span01>Protegido</Span01>
--                  </div>
--                  <Form onSubmit={handleSubmit}>
--                     <label>Nome *</label>
--                     <Input
--                        type="text"
--                        value={name}
--                        onChange={(e) => setName(e.target.value)}
--                        placeholder="Nome"
--                        required
--                     />
--                     <label>E-mail *</label>
--                     <Input
--                        type="email"
--                        value={email}
--                        onChange={(e) => setEmail(e.target.value)}
--                        placeholder="Email"
--                        required
--                     />
--                     <label>CPF *</label>
--                     <Input
--                        type="text"
--                        value={document}
--                        onChange={(e) => setDocument(e.target.value)}
--                        placeholder="CPF"
--                        required
--                     />
--                     <label>TELEFONE *</label>
--                     <Input
--                        type="text"
--                        value={phone}
--                        onChange={(e) => handlePhoneChange(e.target.value)}
--                        placeholder="Telefone"
--                        required
--                     />
--                     <ButtonContainer>
--                        <PrimaryButton type="submit">Completar compra</PrimaryButton >
--                     </ButtonContainer>
--                  </Form>
--                  <div style={{ display: "flex", alignItems: "center", justifyContent: "center", marginTop: "20px" }}>
--                     <LuckSecurity />
--                     <Span01>Todas as transações são seguras e criptografadas</Span01>
--                  </div>
--               </ContainerForm>
-+  return (
-+    <>
-+      <StyledContainer>
-+        <PricingSection>
-+          <PaymentAccessSection>
-+            <img width="100%" src={artExtreme} alt="" />
-+            <h3> Crie conteúdo para redes sociais</h3>
-+          </PaymentAccessSection>
-+          <TotalAmount>
-+            <div>
-+              <SpanBrl>BRL</SpanBrl> <strong>R$1,00</strong>
-             </div>
--         </StyledContainer>
--      </>
--   );
-+            <div style={{ display: "flex", alignItems: "center", justifyItems: "center" }}>
-+              <span style={{ marginRight: "10px" }}>Pix</span>
-+              <PixIcon></PixIcon>
-+            </div>
-+          </TotalAmount>
-+        </PricingSection>
-+        <PaymentContainer>
-+          <Pagarme></Pagarme>
-+          <ContainerForm>
-+            <div style={{ display: "flex", alignItems: "center", justifyContent: "end" }}>
-+              <LuckSecurity /> <Span01>Protegido</Span01>
-+            </div>
-+            <Form onSubmit={handleSubmit}>
-+              <label>Nome *</label>
-+              <Input
-+                type="text"
-+                value={name}
-+                onChange={(e) => setName(e.target.value)}
-+                placeholder="Nome"
-+                required
-+              />
-+              <label>E-mail *</label>
-+              <Input
-+                type="email"
-+                value={email}
-+                onChange={(e) => setEmail(e.target.value)}
-+                placeholder="Email"
-+                required
-+              />
-+              <label>CPF *</label>
-+              <Input
-+                type="text"
-+                value={document}
-+                onChange={(e) => setDocument(e.target.value)}
-+                placeholder="CPF"
-+                required
-+              />
-+              <label>TELEFONE *</label>
-+              <Input
-+                type="text"
-+                value={phone}
-+                onChange={(e) => handlePhoneChange(e.target.value)}
-+                placeholder="Telefone"
-+                required
-+              />
-+              <ButtonContainer>
-+                <PrimaryButton type="submit">Completar compra</PrimaryButton >
-+              </ButtonContainer>
-+            </Form>
-+            <div style={{ display: "flex", alignItems: "center", justifyContent: "center", marginTop: "20px" }}>
-+              <LuckSecurity />
-+              <Span01>Todas as transações são seguras e criptografadas</Span01>
-+            </div>
-+          </ContainerForm>
-+        </PaymentContainer>
-+      </StyledContainer>
-+    </>
-+  );
- };
- 
- export default PaymentForm;
-\ No newline at end of file
-diff --git a/src/components/paymentForm/styles.js b/src/components/paymentForm/styles.js
-index 16a1b21..52d0cc4 100644
---- a/src/components/paymentForm/styles.js
-+++ b/src/components/paymentForm/styles.js
-@@ -2,18 +2,19 @@ import { Link } from "react-router-dom";
- import styled from "styled-components";
- 
- export const StyledContainer = styled.div`
--width: 90%;
-+width: 100%;
-+max-width: 900px;
- height: 700px;
- display: flex;
- align-items: center;
- justify-content: space-around;
- border: 3px solid red;
- 
--@media (min-width: 700px) {
-+/* @media (min-width: 700px) {
-    width: 1152px;
--}
-+} */
- 
--@media (max-width: 760px) {
-+@media (max-width: 850px) {
-   /* flex-wrap: wrap; */
-   display: flex;
-   flex-direction: column;
-@@ -21,6 +22,15 @@ border: 3px solid red;
- }
- `;
- 
-+export const PaymentContainer = styled.div`
-+display: flex;
-+flex-direction: column;
-+align-items: center;
-+width: 100%;
-+max-width: 400px;
-+border-top: 1px solid #000;
-+`;
-+
- export const ContainerForm = styled.div`
- width: 100%;
- border: 1px solid #000;
-@@ -78,8 +88,9 @@ text-align: center;
- `;
- 
- export const PricingSection = styled.div`
--width: 30%;
--height: 425px;
-+width: 100%;
-+max-width: 400px;
-+height: 521px;
- border: 1px solid #000;
- 
- @media (max-width: 760px) {
-@@ -98,6 +109,8 @@ border-bottom: 1px solid  rgb(54, 57, 77, 20%);
- `;
- 
- export const PaymentAccessSection = styled.div`
-+/* width: 100%;
-+max-width: 400px; */
- margin-bottom: 20px;
- /* width: 381px; */
- /* border: 1px solid #000; */
-diff --git a/src/components/paymentValidationInformation/styles.js b/src/components/paymentValidationInformation/styles.js
-index 285af47..39d2247 100644
---- a/src/components/paymentValidationInformation/styles.js
-+++ b/src/components/paymentValidationInformation/styles.js
-@@ -1,13 +1,11 @@
- import styled from "styled-components";
- 
- export const Container = styled.div`
--width: 50%;
-+width: 100%;
-+max-width: 400px;
- display: flex;
- flex-direction: column;
- 
--@media (max-width: 768px) {
--    width: 100%;
--}
- `;
- 
- export const ContainerValidity = styled.div`
-diff --git a/src/contexts/authContext/index.jsx b/src/contexts/authContext/index.jsx
-index 930563b..ce6aca3 100644
---- a/src/contexts/authContext/index.jsx
-+++ b/src/contexts/authContext/index.jsx
-@@ -16,139 +16,143 @@ export const AuthContext = createContext();
-  * @param {object} props.children - Os componentes filhos que terão acesso ao contexto.
-  */
- export const AuthProvider = ({ children }) => {
--   // Estado para verificar se o usuário está autenticado
--   const [isAuthenticated, setIsAuthenticated] = useState(false);
--
--   // Estado para verificar se o usuário já realizou o pagamento
--   const [hasPaid, setHasPaid] = useState(false);
--
--   // Função para navegação programática entre as rotas
--   const navigate = useNavigate();
--
--   // Estado de carregamento para garantir que a lógica de autenticação seja executada antes do render
--   const [loading, setLoading] = useState(true);
--
--   /**
--    * useEffect
--    * 
--    * Verifica o token JWT armazenado no localStorage quando o componente é montado.
--    * Atualiza os estados `isAuthenticated` e `hasPaid` com base nas informações do token e status de pagamento.
--    * Redireciona o usuário para a página de login se o token for inválido ou estiver expirado.
--    */
--   useEffect(() => {
--      const userToken = localStorage.getItem("token");
--      const paymentStatus = localStorage.getItem("status"); // Status de pagamento salvo no localStorage
--
--      if (paymentStatus === "paid") {
--         setHasPaid(true); // Define o estado de pagamento como verdadeiro
-+  const [user, setUser] = useState(null);
-+
-+  // Estado para verificar se o usuário está autenticado
-+  const [isAuthenticated, setIsAuthenticated] = useState(false);
-+
-+  // Estado para verificar se o usuário já realizou o pagamento
-+  const [hasPaid, setHasPaid] = useState(false);
-+
-+  // Função para navegação programática entre as rotas
-+  const navigate = useNavigate();
-+
-+  // Estado de carregamento para garantir que a lógica de autenticação seja executada antes do render
-+  const [loading, setLoading] = useState(true);
-+
-+  /**
-+   * useEffect
-+   * 
-+   * Verifica o token JWT armazenado no localStorage quando o componente é montado.
-+   * Atualiza os estados `isAuthenticated` e `hasPaid` com base nas informações do token e status de pagamento.
-+   * Redireciona o usuário para a página de login se o token for inválido ou estiver expirado.
-+   */
-+  useEffect(() => {
-+    const userToken = localStorage.getItem("token");
-+    const paymentStatus = localStorage.getItem("status"); // Status de pagamento salvo no localStorage
-+
-+    if (paymentStatus === "paid") {
-+      setHasPaid(true); // Define o estado de pagamento como verdadeiro
-+    }
-+
-+    if (!userToken) {
-+      // Se o token não existir, considera o usuário como não autenticado
-+      setIsAuthenticated(false);
-+      setHasPaid(false);
-+      setLoading(false);
-+      return;
-+    }
-+
-+    try {
-+      // Decodifica o token JWT para verificar sua validade
-+      const decodedToken = jwtDecode(userToken);
-+      setUser({ id: decodedToken.payload.id, email: decodedToken.payload.email }); // Armazena userID e email
-+      const currentTime = Date.now() / 1000; // Tempo atual em segundos
-+
-+      if (decodedToken.exp < currentTime) {
-+        // Token expirado
-+        localStorage.removeItem("token"); // Remove o token expirado
-+        setIsAuthenticated(false);
-+        setHasPaid(false);
-+        navigate("/conecte-se"); // Redireciona para a página de login
-+      } else {
-+        // Token válido
-+        setIsAuthenticated(true);
-       }
--
--      if (!userToken) {
--         // Se o token não existir, considera o usuário como não autenticado
--         setIsAuthenticated(false);
--         setHasPaid(false);
--         setLoading(false);
--         return;
-+    } catch (error) {
-+      // Erro na decodificação do token
-+      console.error("Erro ao decodificar o token:", error);
-+      localStorage.removeItem("token");
-+      setIsAuthenticated(false);
-+      setHasPaid(false);
-+      navigate("/conecte-se");
-+    }
-+
-+    setLoading(false); // Finaliza o estado de carregamento
-+  }, [navigate]);
-+
-+  /**
-+   * signin
-+   * 
-+   * Realiza o login do usuário, salvando o token no localStorage e atualizando o contexto global.
-+   * Também faz uma chamada ao backend para verificar o status de pagamento do usuário.
-+   * 
-+   * @param {object} userToken - Token do usuário obtido após autenticação.
-+   */
-+  const signinContexts = async ({ userToken }) => {
-+    console.error(userToken, 'Error Error Error');
-+    try {
-+      // Verificações lógicas como userToken.error não geram exceções; são apenas comparações de valores no objeto.
-+      // Verifica se userToken.error existe e se possui a propriedade status
-+      if (userToken?.error?.status === 429) {
-+        return alert('Muitas tentativas de login. Por favor, tente novamente mais tarde.');
-       }
- 
--      try {
--         // Decodifica o token JWT para verificar sua validade
--         const decodedToken = jwtDecode(userToken);
--         const currentTime = Date.now() / 1000; // Tempo atual em segundos
--
--         if (decodedToken.exp < currentTime) {
--            // Token expirado
--            localStorage.removeItem("token"); // Remove o token expirado
--            setIsAuthenticated(false);
--            setHasPaid(false);
--            navigate("/conecte-se"); // Redireciona para a página de login
--         } else {
--            // Token válido
--            setIsAuthenticated(true);
--         }
--      } catch (error) {
--         // Erro na decodificação do token
--         console.error("Erro ao decodificar o token:", error);
--         localStorage.removeItem("token");
--         setIsAuthenticated(false);
--         setHasPaid(false);
--         navigate("/conecte-se");
-+      // Verificações lógicas como userToken.error não geram exceções; são apenas comparações de valores no objeto.
-+      // Verifica se userToken.error existe e se possui a propriedade status
-+      if (userToken?.error === "Invalid email or password") {
-+        setIsAuthenticated(false);
-+        return;
-       }
- 
--      setLoading(false); // Finaliza o estado de carregamento
--   }, [navigate]);
--
--   /**
--    * signin
--    * 
--    * Realiza o login do usuário, salvando o token no localStorage e atualizando o contexto global.
--    * Também faz uma chamada ao backend para verificar o status de pagamento do usuário.
--    * 
--    * @param {object} userToken - Token do usuário obtido após autenticação.
--    */
--   const signinContexts = async ({ userToken }) => {
--      console.error(userToken, 'Error Error Error');
--      try {
--         // Verificações lógicas como userToken.error não geram exceções; são apenas comparações de valores no objeto.
--         // Verifica se userToken.error existe e se possui a propriedade status
--         if (userToken?.error?.status === 429) {
--            return alert('Muitas tentativas de login. Por favor, tente novamente mais tarde.');
--         }
--
--         // Verificações lógicas como userToken.error não geram exceções; são apenas comparações de valores no objeto.
--         // Verifica se userToken.error existe e se possui a propriedade status
--         if (userToken?.error === "Invalid email or password") {
--            setIsAuthenticated(false);
--            return;
--         }
--
--         localStorage.setItem("token", userToken); // Salva o token no localStorage
--         setIsAuthenticated(true);
--
--         // Verifica o status de pagamento no backend
--         const paymentStatus = await getPaymentStatusFromDatabaseCheckPayment(userToken);
--         console.log(paymentStatus, "paymentStatus");
--
--         if (paymentStatus.paid === "paid") {
--            localStorage.setItem("status", paymentStatus.paid); // Salva o status no localStorage
--            setHasPaid(true); // Atualiza o contexto com o status de pagamento
--         }
--         navigate('/'); // Redireciona para a página inicial
--      } catch (error) {
--         if (error.status === 404) {
--            console.log("Recurso não encontrado:", error.message);
--         } else {
--            console.error("Erro inesperado:", error.message);
--         }
-+      localStorage.setItem("token", userToken); // Salva o token no localStorage
-+      setIsAuthenticated(true);
-+
-+      // Verifica o status de pagamento no backend
-+      const paymentStatus = await getPaymentStatusFromDatabaseCheckPayment(userToken);
-+      console.log(paymentStatus, "paymentStatus");
-+
-+      if (paymentStatus.paid === "paid") {
-+        localStorage.setItem("status", paymentStatus.paid); // Salva o status no localStorage
-+        setHasPaid(true); // Atualiza o contexto com o status de pagamento
-+      }
-+      navigate('/'); // Redireciona para a página inicial
-+    } catch (error) {
-+      if (error.status === 404) {
-+        console.log("Recurso não encontrado:", error.message);
-+      } else {
-+        console.error("Erro inesperado:", error.message);
-       }
--   };
--
--   /**
--    * logout
--    * 
--    * Faz o logout do usuário, removendo o token e o status de pagamento do localStorage.
--    * Atualiza o contexto global e redireciona para a página de login.
--    */
--   const logout = () => {
--      localStorage.removeItem("token"); // Remove o token do localStorage
--      localStorage.removeItem("status"); // Remove o status de pagamento do localStorage
--      setIsAuthenticated(false); // Atualiza o estado de autenticação
--      setHasPaid(false); // Reseta o status de pagamento
--      navigate("/conecte-se"); // Redireciona para a página de login
--   };
--
--   // Provedor do contexto que compartilha estados e funções para os componentes filhos
--   return (
--      <AuthContext.Provider
--         value={{
--            isAuthenticated, // Indica se o usuário está autenticado
--            hasPaid,         // Indica se o usuário realizou o pagamento
--            loading,         // Estado de carregamento
--            signinContexts,          // Função para login
--            logout,          // Função para logout
--            setHasPaid       // Atualiza manualmente o status de pagamento
--         }}>
--         {children}
--      </AuthContext.Provider>
--   );
-+    }
-+  };
-+
-+  /**
-+   * logout
-+   * 
-+   * Faz o logout do usuário, removendo o token e o status de pagamento do localStorage.
-+   * Atualiza o contexto global e redireciona para a página de login.
-+   */
-+  const logout = () => {
-+    localStorage.removeItem("token"); // Remove o token do localStorage
-+    localStorage.removeItem("status"); // Remove o status de pagamento do localStorage
-+    setIsAuthenticated(false); // Atualiza o estado de autenticação
-+    setHasPaid(false); // Reseta o status de pagamento
-+    navigate("/conecte-se"); // Redireciona para a página de login
-+  };
-+
-+  // Provedor do contexto que compartilha estados e funções para os componentes filhos
-+  return (
-+    <AuthContext.Provider
-+      value={{
-+        user,
-+        isAuthenticated, // Indica se o usuário está autenticado
-+        hasPaid,         // Indica se o usuário realizou o pagamento
-+        loading,         // Estado de carregamento
-+        signinContexts,          // Função para login
-+        logout,          // Função para logout
-+        setHasPaid      // Atualiza manualmente o status de pagamento
-+      }}>
-+      {children}
-+    </AuthContext.Provider>
-+  );
- };
-diff --git a/src/pages/pagePaymentForm/index.jsx b/src/pages/pagePaymentForm/index.jsx
-index f14c882..7ed49ec 100644
---- a/src/pages/pagePaymentForm/index.jsx
-+++ b/src/pages/pagePaymentForm/index.jsx
-@@ -1,21 +1,21 @@
- import GridLayout from "../../components/layout";
- import PaymentForm from "../../components/paymentForm";
- import Header from "../../components/header";
--import { StyledPayment } from "./styles";
- import Navbar from '../../components/hamburgerMenu';
-+import { StyledPayment } from "./styles";
- 
- const PaymentService = () => {
--   return (
--      <>
--         {/* <Navbar></Navbar>
-+  return (
-+    <>
-+      {/* <Navbar></Navbar>
-          <Header></Header> */}
--         <GridLayout>
--            <StyledPayment>
--               <PaymentForm />
--            </StyledPayment>
--         </GridLayout>
--      </>
--   );
-+      <GridLayout>
-+        <StyledPayment>
-+          <PaymentForm />
-+        </StyledPayment>
-+      </GridLayout>
-+    </>
-+  );
- };
- 
- export default PaymentService;
-\ No newline at end of file
-diff --git a/src/pages/pageSignUpForm/index.jsx b/src/pages/pageSignUpForm/index.jsx
-index 09e011f..f50b728 100644
---- a/src/pages/pageSignUpForm/index.jsx
-+++ b/src/pages/pageSignUpForm/index.jsx
-@@ -1,18 +1,18 @@
- import Header from '../../components/header';
- import SignUpForm from "../../components/signupForm";
- import { StyledsIngup } from './styles';
--import Navbar from '../../components/hamburgerMenu';
-+import HamburgerMenu from '../../components/hamburgerMenu';
- 
- const Signup = () => {
--   return (
--      <>
--         <Navbar></Navbar>
--         {/* <Header></Header> */}
--         <StyledsIngup>
--            <SignUpForm></SignUpForm>
--         </StyledsIngup>
--      </>
--   );
-+  return (
-+    <>
-+      <HamburgerMenu></HamburgerMenu>
-+      {/* <Header></Header> */}
-+      <StyledsIngup>
-+        <SignUpForm></SignUpForm>
-+      </StyledsIngup>
-+    </>
-+  );
- };
- 
- export default Signup;
-\ No newline at end of file
-diff --git a/src/routes/AppRoutes.jsx b/src/routes/AppRoutes.jsx
-index 340ae0e..cddfba4 100644
---- a/src/routes/AppRoutes.jsx
-+++ b/src/routes/AppRoutes.jsx
-@@ -5,7 +5,7 @@ import Login from "../pages/pageLoginForm";
- import Signup from "../pages/pageSignUpForm";
- import PaymentService from "../pages/pagePaymentForm";
- import PageCourseList from "../pages/pageCourseList";
--import Navbar from "../components/hamburgerMenu";
-+// import Navbar from "../components/hamburgerMenu";
- import PaymentConfirmation from "../pages/pagePaymentConfirmation";
- 
- import Home from "../pages/pageHome";
-@@ -13,25 +13,25 @@ import Home from "../pages/pageHome";
- import { PrivateRouteCourseList, PrivateRoutePaymentForm, AuthRedirectRouteSignIn, AuthRedirectRouteSignUp, PrivateRoutePaymentConfirmation } from "./AuthRedirectRoute";
- 
- const AppRoutes = () => {
--   return (
--      <Routes>
--         {/* Página acessível por qualquer usuário */}
--         <Route path="/" element={<GridLayout> <Home /> </GridLayout>} />
-+  return (
-+    <Routes>
-+      {/* Página acessível por qualquer usuário */}
-+      <Route path="/" element={<GridLayout> <Home /> </GridLayout>} />
- 
--         {/* Página 404 e outras páginas públicas */}
--         <Route path="nav" element={<Navbar />} />
--         <Route path="confirmacao-pagamento" element={<PrivateRoutePaymentConfirmation element={<PaymentConfirmation />} />} />
--         <Route path="*" element={<NotFoundPage />} />
-+      {/* Página 404 e outras páginas públicas */}
-+      {/* <Route path="nav" element={<Navbar />} /> */}
-+      <Route path="confirmacao-pix-gerado" element={<PrivateRoutePaymentConfirmation element={<PaymentConfirmation />} />} />
-+      <Route path="*" element={<NotFoundPage />} />
- 
--         {/* Bloquear login e cadastro para usuários autenticados */}
--         <Route path="conecte-se" element={<AuthRedirectRouteSignIn element={<Login />} />} />
--         <Route path="users/sign_up" element={<AuthRedirectRouteSignUp element={<Signup />} />} />
-+      {/* Bloquear login e cadastro para usuários autenticados */}
-+      <Route path="conecte-se" element={<AuthRedirectRouteSignIn element={<Login />} />} />
-+      <Route path="users/sign_up" element={<AuthRedirectRouteSignUp element={<Signup />} />} />
- 
--         {/* Rotas privadas (só para usuários autenticados) */}
--         <Route path="pagamento" element={<PrivateRoutePaymentForm element={<PaymentService />} />} />
--         <Route path="cursos-lista" element={<PrivateRouteCourseList element={<PageCourseList />} />} />
--      </Routes>
--   );
-+      {/* Rotas privadas (só para usuários autenticados) */}
-+      <Route path="gerar-pix" element={<PrivateRoutePaymentForm element={<PaymentService />} />} />
-+      <Route path="cursos-lista" element={<PrivateRouteCourseList element={<PageCourseList />} />} />
-+    </Routes>
-+  );
- };
- 
- export default AppRoutes;
diff --git a/src/components/courseList/index.jsx b/src/components/courseList/index.jsx
index c3e2eaa..fa7bd7f 100644
--- a/src/components/courseList/index.jsx
+++ b/src/components/courseList/index.jsx
@@ -40,7 +40,7 @@ const CourseList = () => {
 
   return (
     <StyledContainer>
-      <h1>Essa rota é privada, visível apenas para usuários assinantes.</h1>
+      <h1 style={{ textAlign: "center" }}>Essa rota é privada, visível apenas para usuários assinantes.</h1>
     </StyledContainer>
   );
 };
diff --git a/src/components/hamburgerMenu/index.jsx b/src/components/hamburgerMenu/index.jsx
index 6e3d49d..c7ae120 100644
--- a/src/components/hamburgerMenu/index.jsx
+++ b/src/components/hamburgerMenu/index.jsx
@@ -21,7 +21,7 @@ const HamburgerMenu = () => {
           hasPaid ? (
             <Link onClick={closeMenu} to="/cursos-lista">Curso</Link>
           ) : (
-            <Link onClick={closeMenu} to="/pagamento">Assinatura</Link>
+            <Link onClick={closeMenu} to="/gerar-pix">Assinatura</Link>
           )
         }
         {!isAuthenticated && (
